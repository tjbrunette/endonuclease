#!/usr/bin/perl

use strict;
use warnings;

use FindBin;

use lib "$FindBin::Bin/perl_lib";
use Cwd qw/ abs_path /;
use Getopt::Long;
use File::Copy;
use File::Path;
use File::Basename;
use Rosetta::Job;
use Rosetta::Util;
use Rosetta::align_util qw/ read_alns /;
use Rosetta::Protocol;
use Rosetta::Fragments;
use Rosetta::Sequence qw/ read_protein_fasta_fn /;
use Rosetta::TargetFiles;

my %options;
my $options_fn        = '/work/cmiles/src/cm_scripts/rosetta_cm.conf';
$options{native}      = 0;
$options{boinc_tag}   = 'cm_test';
$options{burial_fn}   = 0;
$options{extra_files} = [];
Rosetta::Util::load_options_from_file($options_fn,\%options);
$options{method}      = [ 'abrelax' ];
&GetOptions(
        \%options,
        "native=s",
        "boinc_tag=s",
        "burial_fn=s",
        "extra_files=s",
        "method=s",
        "save_all_out!",
);
my @fasta_files = @ARGV;

TARGET: foreach my $fasta_fn (@fasta_files) {
        if ( ! -f $fasta_fn ) { next TARGET; }

        my $target = basename($fasta_fn,'.fasta');
        my $dir    = $target;

        mkpath $dir;
        mkpath "$dir/fragments";
        copy( $fasta_fn, $dir ) or die "Error copying $fasta_fn -> $dir!\n";
        copy( $fasta_fn, "$dir/fragments" ) or die "Error copying $fasta_fn -> $dir/fragments!\n";

        # make fragments
        my $frag_job = Rosetta::Fragments::make_fragments($fasta_fn, "$dir/fragments", \%options);
        $frag_job->run_with_message( "making fragments for $target" );

        foreach my $method (@{$options{method}}) {
                my $target_id = basename($target);
                my $fns = Rosetta::TargetFiles->new(
                        $target_id, $target,
                        '/work/cmiles/src/cm_scripts/protocols/protocol_files.conf'
                );

                $fns->value( 'fasta_fn', abs_path( "$target/$target.fasta" ) );

                # Retrieve fragment filename from job
                my $frag3 = abs_path(join '/', ($frag_job->dir(),$frag_job->results_file()));
                my $frag9 = $frag3;
                $frag9 =~ s/3mers/9mers/;

                $fns->value( 'frag3_fn', $frag3 );
                $fns->value( 'frag9_fn', $frag9 );

                if ( -f $options{native} ) {
                        $fns->value( 'native_fn', abs_path($options{native}) );
                }

                if ( -f $options{burial_fn} ) {
                        $fns->value( 'burial_fn', abs_path($options{burial_fn}) );
                }

                my $protocol = Rosetta::Protocol->new("/work/cmiles/src/cm_scripts/protocols/$method.template");

                if ( $options{extra_files} ) {
                        $protocol->extra_files($options{extra_files});
                }

                if ( $options{save_all_out} ) {
                        $protocol->save_all_out(1);
                }

                $protocol->boinc_tag($options{boinc_tag});
                $protocol->setup_boinc_job( "$dir/boinc_jobs/$method", $fns );
        }
}
