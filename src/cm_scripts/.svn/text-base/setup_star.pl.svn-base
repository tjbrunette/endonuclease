#!/usr/bin/perl

use strict;
use warnings;

use lib '/work/tex/src/cm_scripts/perl_lib';
use Cwd qw/ abs_path getcwd /;
use Getopt::Long;
use File::Copy;
use File::Path;
use File::Basename;
use Rosetta::Job;
use Rosetta::Util;
use Rosetta::align_util qw/ read_alns /;
use Rosetta::Protocol;
use Rosetta::Fragments;
use Rosetta::TargetFiles;

my %options;
my $options_fn        = '/work/tex/src/cm_scripts/rosetta_cm.conf';
my $boinc_tag         = 'cm_test';
$options{native}      = 0;
$options{boinc_tag}   = 0;
$options{extra_files} = [];
Rosetta::Util::load_options_from_file($options_fn,\%options);
$options{method}      = [ 'star' ];
&GetOptions(
	\%options,
	"native=s",
	"boinc_tag=s",
	"extra_files=s",
	"method=s",
);
my @fasta_files = @ARGV;

TARGET: foreach my $fasta_fn (@fasta_files) {
	if ( ! -f $fasta_fn ) { next TARGET; }

	my $target = basename($fasta_fn,'.fasta');
	my $dir    = $target;

	mkpath $dir;
	copy( $fasta_fn, $dir ) or die "Error copying $fasta_fn -> $dir!\n";
	if ( -f $options{native} ) {
		copy( $options{native}, $dir ) or die "Error copying $options{native} -> $dir!\n";
	}

	# make fragments
        my $orig_dir = getcwd;
        chdir($dir);
        print "making fragments for $target\n";
        my $target_id = basename($target);

        my %files_wanted = (
		'frag3_fn' => "$target_id\_standard_frags.fsc.200.3mers",
		'frag9_fn' => "$target_id\_standard_frags.fsc.200.9mers",
		'alignment_fn' => "$target_id.nonlocal.alignments",
        );


        if ( !files_exist(\%files_wanted) ) {
                my $frag_job = Rosetta::Fragments::make_fragments($fasta_fn, ".", \%options);
                if ( $frag_job->can_run ) {
                    $frag_job->run_with_message( "making fragments for $target" );
                }
		system("~dekim/src/fragments/get_nonlocal_fragments.pl $fasta_fn");
                system("~dekim/nonlocal/casp9_fm/rename_pdbs_and_alignments.pl *.alignment > $target.nonlocal.alignments");
        }
        files_exist(\%files_wanted) or die "Error: missing files!\n";
        chdir($orig_dir);

	foreach my $method (@{$options{method}}) {
		my $target_id = basename($target);
		my $fns = Rosetta::TargetFiles->new(
			$target_id, $target,
			'/work/tex/src/cm_scripts/protocols/protocol_files.conf'
		);

		$fns->value( 'fasta_fn', abs_path( "$target_id.fasta" ) );
		$fns->value( 'frag3_fn', abs_path( "$target_id\_standard_frags.fsc.200.3mers" ) );
		$fns->value( 'frag9_fn', abs_path( "$target_id\_standard_frags.fsc.200.9mers" ) );
                $fns->value( 'psipred_fn', abs_path( "$target_id.psipred_ss2" ) );
                $fns->value( 'alignment_fn', abs_path( "$target_id.nonlocal.alignments" ) );
                $fns->value( 'template_pdbs', (join '', glob("templates/A*.pdb")));

		if ( -f $options{native} ) {
			$fns->value( 'native_fn', abs_path($options{native}) );
		}

		my $protocol = Rosetta::Protocol->new("/work/tex/src/cm_scripts/protocols/$method.template");
		if ( $options{extra_files} ) {
			$protocol->extra_files($options{extra_files});
		}
		$protocol->boinc_tag($boinc_tag);
		$protocol->setup_boinc_job( "$dir/boinc_jobs/$method", $fns );
	}
}

sub files_exist {
    my $files = shift;
    #my $files = $_[0]; equivalent to line above
    # in perl, arguments are passed in the special @_ array

    my $files_to_make = 0;
    foreach my $key (keys %$files) {
        if ( ! -f $files->{$key} ) {
		$files_to_make++;
		print "missing file $files->{$key}\n";
        }
    }
    return ($files_to_make == 0 );
}
