#! /usr/bin/env python2.7
import re

def find_flag_file(job_file):
    '''Returns the flag file referenced by the job'''
    expr = re.compile('@\S+')
    with open(job_file) as file:
        for line in file:
            line = line.strip()
            if not line.startswith('arguments'):
                continue

            match = expr.search(line)
            if match:
                # Ignore @
                return match.group()[1:]


def find_zip_file(job_file):
    '''Returns the zip file referenced by the job'''
    prefix = '-in:file:boinc_wu_zip'
    expr = re.compile(prefix + '\s+.+\s?')
    with open(job_file) as file:
        for line in file:
            line = line.strip()
            if not line.startswith('arguments'):
                continue

            match = expr.search(line)
            if match:
                # Ignore -in:file:boinc_wu_zip
                return match.group()[len(prefix) : ].strip()


def append_lines(lines, filename):
    '''Appends lines to filename'''
    with open(filename, 'a') as file:
        for line in lines:
            flags = line.split('-')[1:]
            for f in flags:
                file.write('-%s\n' % f)


def add_to_zip(input_filenames, output_filename):
    from os.path import basename
    from zipfile import ZipFile

    with ZipFile(output_filename, 'a') as out:
        for f in input_filenames:
            out.write(f, basename(f))


def copy_file(src, dst):
    '''Copies the file at src to dst'''
    from shutil import copyfile
    copyfile(src, dst)


def update_job(job_file, change_flags, change_zip, new_filename):
    # Nothing to do
    if not change_flags and not change_zip:
        return

    flag_prev = find_flag_file(job_file)
    flag_curr = flag_prev
    if change_flags:
        flag_curr = new_filename(flag_curr)

    zip_prev = find_zip_file(job_file)
    zip_curr = zip_prev
    if change_zip:
        zip_curr = new_filename(zip_curr)

    with open(new_filename(job_file), 'w') as outfile:
        with open(job_file) as infile:
            for line in infile:
                # Update job name
                if line.startswith('name'):
                    outfile.write(new_filename(line))

                # Update job files
                else:
                    line = line.replace(flag_prev, flag_curr)
                    line = line.replace(zip_prev, zip_curr)
                    outfile.write(line)

                
if __name__ == '__main__':
    from argparse import ArgumentParser
    parser = ArgumentParser()

    # Input options
    parser.add_argument('--in', required = True, help = "Input job")
    parser.add_argument('--add_flags', nargs='*', help = "Add to output job's flags file")
    parser.add_argument('--add_files', nargs='*', help = "Add to output job's zip file")

    # Output options
    parser.add_argument('--find', required = True, help = "Replace instances of `find` with `replace`")
    parser.add_argument('--replace', required = True, help = "Replace instances of `find` with `replace`")

    options = vars(parser.parse_args())

    # Filename manipulation
    new_filename = lambda f: f.replace(options['find'], options['replace'])

    job = options['in']

    # Update the flags
    change_flags = options['add_flags']
    if change_flags:
        f = find_flag_file(job)
        copy_file(f, new_filename(f))
        append_lines(options['add_flags'], new_filename(f))

    # Update the archive
    change_zip = options['add_files']
    if change_zip:
        f = find_zip_file(job)
        copy_file(f, new_filename(f))
        add_to_zip(options['add_files'], new_filename(f))

    # Update the job
    update_job(job, change_flags, change_zip, new_filename)
