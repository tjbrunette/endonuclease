#! /usr/bin/env python
#
# Identifies the conserved core of a set of protein structures with
# non-identical sequences using maximum likelihood superposition.
import glob, os, shutil, string
import theseus, util

partial_thread = string.Template('$rosetta_source/bin/partial_thread.default.$platform$compiler$mode -database $rosetta_database -in:file:fasta $fasta -in:file:alignment $alignment -in:file:template_pdb $templates -mute all')

def generate_a2m_alignment(options, output_filename):
    params = {}
    params['rosetta_source'] = options['rosetta_source']
    params['rosetta_database'] = options['rosetta_database']
    params['platform'] = options['platform']
    params['compiler'] = options['compiler']
    params['mode'] = options['mode']

    params['fasta'] = options['fasta']
    params['alignment'] = options['alignment']
    params['templates'] = ' '.join(options['templates'])

    command = partial_thread.safe_substitute(params)
    os.system(command)

    # Determine which files were generated by the partial_thread application.
    # Targets will be inserted as keys into a dictionary. Later, we'll associate
    # a sequence with each.
    sequences = {}
    with open(options['alignment']) as file:
        for line in file:
            line = line.strip()

            if line.startswith('##'):
                cols = line.split()  # Format: ## t000_.fasta 1prwA_304
                target = cols[2] + '.pdb'
                sequences[target] = None

    # Associate a full-length alignment to each partial thread generated
    # by the system call above. Keys are filenames (e.g. 2kruA_201.pdb).
    for target in sequences.keys():
        with open(target) as file:
            for line in file:
                line = line.strip()

                if line.startswith('REMARK query_anchored_aln'):
                    cols = line.split()
                    sequence = cols[2]
                    sequences[target] = sequence
                    break
                    
    # Write the A2M-format alignment file
    with open(output_filename, 'w') as fout:
        for (target, sequence) in sequences.iteritems():
           fout.write('>%s\n' % target)
           fout.write('%s\n' % sequence)

    # Partial thread filenames
    return sequences.keys()


if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser()

    # Rosetta options
    parser.add_argument('--rosetta_source', help = 'Path to rosetta_source')
    parser.add_argument('--rosetta_database', help = 'Path to rosetta_database')
    parser.add_argument('--platform', default = 'linux', choices = ['macos', 'linux'])
    parser.add_argument('--compiler', default = 'gcc', choices = ['gcc', 'icc', 'clang'])
    parser.add_argument('--mode', default = 'release', choices = ['debug', 'release'])
    parser.add_argument('--keep_partial_threads', action = 'store_true', default = False)
    parser.add_argument('--min_length', type = int, default = 0, help = 'Minimum number of residues in a conserved region')

    # Alignment generation options
    parser.add_argument('--fasta', help = 'Query sequence')
    parser.add_argument('--alignment', help = 'Alignments to query sequence')
    parser.add_argument('--templates', metavar = 'T', nargs = '+', help = 'Template structures')

    # Structural superposition options
    parser.add_argument('--threshold', type = float, default = 1.0, help = 'Variance threshold')
    parser.add_argument('--pymol', help = 'PyMol selection command')

    options = vars(parser.parse_args())

    # Generate partial threads for each (sequence, template) pair.
    # Combine full-length sequences into an A2M-format file for theseus.
    a2m_file = 'theseus.aln'
    partial_threads = generate_a2m_alignment(options, a2m_file)
    theseus.superimpose(partial_threads, a2m_file)

    # Optionally retain annotated partial threads
    if not options['keep_partial_threads']:
        map(util.attempt_rm, partial_threads)
    else:
        pt_dir = 'annotated_partial_threads'
        util.attempt_rmdir(pt_dir)
        os.mkdir(pt_dir)
        for pt in partial_threads:
            shutil.move(pt, pt_dir)

    variances = theseus.per_residue_variances('theseus_variances.txt', theseus.NumberingScheme.TEMPLATE)
    conserved = [r for r in variances.keys() if variances[r] <= options['threshold']]
    conserved = theseus.remove_short_regions(conserved, options['min_length'])

    # Create a representative model of the core
    theseus.representative_model(conserved, 'theseus_sup.pdb', 'theseus_core.pdb')

    # Optionally generate a PyMol selection script
    if options['pymol']:
        theseus.show_pymol_string(conserved, options['pymol'])

    # Remove autogenerated files
    theseus.cleanup()
