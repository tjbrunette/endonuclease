#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use File::Copy;
use File::Path;
use File::Basename;
use Cwd;

use FindBin;
use lib "$FindBin::Bin/../perl_lib";
use Rosetta::Job qw/ run_jobs_in_parallel /;
use Rosetta::Util qw/ options_to_str mkdir_safe copy_safe /;

my %options;
$options{script_base}         = dirname($0);
$options{aln_dir}  = getcwd;
$options{max_templates} = 10;
$options{n_procs} = 8;
$options{outfile} = "alignment_generated.filt";
#$options{fast_alignment_gen} = 1;
&GetOptions(
	\%options,
	"outfile=s",
	"min_alns=i",
   	"max_templates=i",
    "max_template_pct_id=f",
    "aln_dir=s",
    "targetid=s",
    "fast_alignment_gen!",
	"n_procs=i",
);
#fast uses only alignment methods that take < 15 minutes.
#currently that means only hhsearch

my $fasta = $ARGV[0];
my $fasta_id = basename($fasta,".fasta");
my $aln_dir = $options{aln_dir};
my $outfile = "$aln_dir/$options{outfile}";
my $hhsearch_aln_dir = "$aln_dir/hhsearch_aln";
my $raptor_aln_dir = "$aln_dir/raptor_aln";
my $sparks_aln_dir = "$aln_dir/sparks_aln";
my $hhsearch_offset = 200;
my $sparks_offset = 300;
my $raptor_offset = 100;
mkdir_safe("$hhsearch_aln_dir");
copy_safe("$aln_dir/$fasta","$hhsearch_aln_dir");
my @jobs;
if(!$options{fast_alignment_gen}){
	mkdir_safe("$raptor_aln_dir");
	mkdir_safe("$sparks_aln_dir");
	copy_safe("$aln_dir/$fasta","$sparks_aln_dir");
	copy_safe("$aln_dir/$fasta","$raptor_aln_dir");
	#=======raptor=========================================
	my $job = Rosetta::Job->new(
		executable	 => "$options{script_base}/run-raptorX.pl",
		results_file => "$raptor_aln_dir/$fasta_id.raptor.filt",
		args	     => [$fasta,
						 "-max_templates ", $options{max_templates}, 
											 "-nosort",
						 "-renumber_offset ", $raptor_offset,
						 "-aln_dir ", $raptor_aln_dir,
					   ],
		dir	     => '.',
		lockfile   => "$fasta_id.raptor.lock",
		logfile    => "$fasta_id.raptor.log",
	  );
	$job->run_with_message("running raptor on $fasta_id\n");
	#=======sparks=========================================
	$job = Rosetta::Job->new(
		executable	 => "$options{script_base}/run-sparksX.pl",
		results_file => "$sparks_aln_dir/$fasta_id.sparks.filt",
		args	     => [$fasta,
						 "-max_templates ", $options{max_templates}, 
						 "-nosort",
						 "-renumber_offset ", $sparks_offset,
						 "-aln_dir ", $sparks_aln_dir,
					   ],
		dir	     => '.',
		lockfile   => "$fasta_id.sparks.lock",
		logfile    => "$fasta_id.sparks.log",
	  );
	$job->run_with_message("running sparks on $fasta_id\n");
}
#=======hhsearch=========================================
my $job = Rosetta::Job->new(
	executable	 => "$options{script_base}/run-hhsearch.pl",
	results_file => "$hhsearch_aln_dir/$fasta_id.hhsearch.filt",
	args	     => [$fasta,
					 "-max_templates ", $options{max_templates}, 
					 "-nosort",
					 "-renumber_offset ", $hhsearch_offset,
					 "-aln_dir ", $hhsearch_aln_dir,
					 "-use_hhblits",
					 "-outfile",
					 "-targetid t000_",
					 "-outfile ", "$fasta_id.hhsearch.filt",
					 "-n_procs ", 8,  
				   ],
	dir	     => $hhsearch_aln_dir,
	lockfile   => "$fasta_id.hhsearch.lock",
	logfile    => "$fasta_id.hhsearch.log",
  );
$job->run_with_message("running hhsearch on $fasta_id\n");
#Rosetta::Job::run_jobs_in_parallel( \@jobs, $options{n_procs});
#I decided to move away from running the jobs in parallel because I think raptor and hhsearch are dieing.
my @aln_results;
if(!$options{fast_alignment_gen}){
	copy_safe("$sparks_aln_dir/$fasta_id.sparks.filt","$aln_dir");
	copy_safe("$raptor_aln_dir/$fasta_id.raptor.filt","$aln_dir");
	push(@aln_results,"$aln_dir/$fasta_id.sparks.filt ");
	push(@aln_results,"$aln_dir/$fasta_id.raptor.filt ");	 
}
copy_safe("$hhsearch_aln_dir/$fasta_id.hhsearch.filt","$aln_dir");
push(@aln_results,"$aln_dir/$fasta_id.hhsearch.filt ");

#=======convert_aln=========================================
my $convert_job = Rosetta::Job->new(
	executable => "$options{script_base}/convert_aln.pl",
	args       => [
		"-format_in grishin",
		"-format_out grishin",
		"-nosort",
		"-norenumber",
		"-unique",
		@aln_results,
		"> $options{outfile}",
	  ],
	lockfile     => "$aln_dir/convert.$options{outfile}.lock",
	results_file => $options{outfile},
	dir          => "$aln_dir",
  );

$convert_job->run_with_message(
	"combining alignments into $options{outfile}"
  );
