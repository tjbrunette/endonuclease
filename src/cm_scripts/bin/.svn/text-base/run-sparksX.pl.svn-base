#!/usr/bin/perl

use strict;
use warnings;
use Cwd;
use Getopt::Long;
use File::Basename;

my %options;
$options{script_base}         = dirname($0);
$options{outfile}             = 0;
$options{max_templates}       = 100;
$options{sort}                = 1;
$options{renumber_offset}     = 0;
$options{aln_dir}             = getcwd;

use FindBin;
use lib "$FindBin::Bin/../perl_lib";
use Rosetta::Job qw/ run_jobs_in_parallel /;
use Rosetta::Util qw/ options_to_str /;
use Rosetta::Sequence qw/ read_protein_fasta_fn /;

&GetOptions(
	\%options,
	"outfile=s",
	"max_templates=i",
	"renumber_offset=i",
	"aln_dir=s",
	"sort!",
);

my $fasta = $ARGV[0];
my $fasta_id = basename($fasta,".fasta");

my $aln_dir = $options{aln_dir};
chdir($aln_dir);

$options{sparks_dir} = '/work/robetta/src/rosetta_server/bin/sparks-x';


if ( !$options{outfile} ) {
	$options{outfile} = "$fasta_id.sparks.filt";
}

my $sparks_exe = "$options{sparks_dir}/bin/scan1.sh";
my $sparks_source_path = "$options{sparks_dir}/source_this";

print STDERR "running with the following options:\n";
print STDERR options_to_str( \%options ), "\n";

if ( -f $options{outfile} ) {
	die "Error: not overwriting $fasta.filt!\n";
}

print "running sparks... ";
#system("./source $sparks_source_path\n");

my @jobs;
my $job = Rosetta::Job->new(
	executable   => "$sparks_exe",
	results_file => "$fasta.aln",
	args         => [
		"$fasta",
	],
	dir          => '.',
	lockfile     => "$fasta.sparks.lock",
);

$job->run_with_message( "searching sparks with $fasta" );
#=====================================================================
my $sort_option = "-sort";
if($options{sort} == 0){
	$sort_option = "-nosort"
}
my $convert_job = Rosetta::Job->new(
	executable => "$options{script_base}/convert_aln.pl",
	args       => [
		"-format_in sparks",
		"-format_out grishin",
		"-max_templates ",$options{max_templates},
		$sort_option,
		"-renumber_offset ",$options{renumber_offset},
		"-unique",
		"$fasta.aln",
		"> $options{outfile}",
	],
	lockfile     => "convert.$options{outfile}.lock",
	results_file => $options{outfile},
	dir          => ".",
);


$convert_job->run_with_message(
	"combining alignments into $options{outfile}"
);
