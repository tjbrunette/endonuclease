#!/usr/bin/perl

use strict;
use warnings;

use Cwd;
use Getopt::Long;
use File::Basename;
use Sys::Hostname;

my %options;
$options{script_base}         = dirname($0);
$options{n_procs}             = 2;
$options{hhsearch_path}       = '/work/tex/hhsearch';
$options{cal_db}              = '/work/tex/hhsearch/db/cal.hhm';
$options{n_rounds}            = 3;
$options{outfile}             = 0;
$options{min_alns}            = 20;
$options{max_templates}       = 100;
$options{sort}                = 1;
$options{nr_db}               = "/scratch/ROSETTA/genomes/nr";
$options{NN_program}          = "/work/robetta/src/rosetta_server/bin/hhsearch/hhsearch_NN_ranking/hhpred_NN_filter.pl";
$options{aln_dir}             = ".";
$options{talos_fn}            = 0;
$options{renumber_offset}     = 0;
$options{ssw}                 = 0.11;
$options{db}                  = [
	'/scratch/ROSETTA/hhsearch_database/hhm1',
	'/scratch/ROSETTA/hhsearch_database/hhm3',
	'/scratch/ROSETTA/hhsearch_database/hhm5',
	'/scratch/ROSETTA/hhsearch_database/hhm8',
];
$options{aln_dir}              = getcwd;

my $host = hostname;
# options for Robetta
if ( $host =~ /nrb/ ) {
	$options{db} = [
		'/scratch/robetta/local_db/pdb70_03May10_hhblits.hhm',
	];
	$options{hhsearch_path} = '/work/robetta/src/rosetta_server/bin/hhsearch/hhsearch1.6.0';
	#$options{cal_db}              = '/work/robetta/src/rosetta_server/bin/hhsearch/hhsearch1.5.1/cal.hhm';
}

$options{max_e_value}         = 100;
$options{min_query_coverage}  = 20;
$options{max_template_pct_id} = 0.9;

use FindBin;
use lib "$FindBin::Bin/../perl_lib";
use Rosetta::Job qw/ run_jobs_in_parallel /;
use Rosetta::Util qw/ options_to_str /;
use Rosetta::Sequence qw/ read_protein_fasta_fn /;
use hhsearch::Util qw/ make_hhm /;

&GetOptions(
	\%options,
	"db=s",
	"n_procs=i",
	"n_rounds=i",
	"cal_db=s",
	"max_e_value=f",
	"min_query_coverage=f",
	"max_templates=i",
	"renumber_offset=i",
	"sort!",
	"outfile=s",
	"min_alns=i",
	"use_hhblits!",
	"max_template_pct_id=f",
	"aln_dir=s",
	"talos_fn=s",		
	"ssw=f",
);

my $fasta = $ARGV[0];
my $fasta_id = basename($fasta,".fasta");

if ( !$options{outfile} ) {
	$options{outfile} = "$fasta.filt";
}

chdir($options{aln_dir});

print STDERR "running with the following options:\n";
print STDERR options_to_str( \%options ), "\n";

if ( -f $options{outfile} ) {
	die "Error: not overwriting $fasta.filt!\n";
}

print "making hhm ... ";
my $hhm_file = make_hhm( $fasta, '.', \%options );
print "done.\n";
if ( $options{talos_fn} ) {
	$hhm_file = add_talos_ss_to_hhm( $options{talos_fn}, $hhm_file );
}

if ( !$options{use_hhblits} ) {
    system( "$options{hhsearch_path}/hhsearch -ssw $options{ssw} -cal -i $hhm_file -d $options{cal_db} -o /dev/null" );
}

my @hhr_files;
my @jobs;
foreach my $db ( @{ $options{db} } ) {
	my $db_base  = basename($db);
	my $hhr_file = join '.', ( $fasta, $db_base, 'hhr' );
	my $tab_file = join '.', ( $fasta, $db_base, 'start.tab' );
	my $job = Rosetta::Job->new(
		executable   => "$options{hhsearch_path}/hhsearch",
		results_file => $hhr_file,
		args         => [
			"-i $hhm_file -d $db -o $hhr_file",
			"-cpu 2", # never seems to use more than 2 cpus,
			"-mact 0.05",
			"-ssw $options{ssw}",
			"-atab $tab_file",
			"-realign",
		],
		dir          => '.',
		lockfile     => "$fasta.$db_base.hhsearch_lock",
	);

	$job->run_with_message( "searching hhsearch database $db with $hhm_file" );
	
	if ( !$options{use_hhblits} ) {
		#Removed the following because they kill the NN_filter
		$job->add_args(
			"-E $options{max_e_value}",
			"-cov $options{min_query_coverage}",
			"-b $options{min_alns}",
			#"-Z 0 -z 0",
		  );
	}
	
	push @jobs, $job;
	push @hhr_files, $hhr_file;
}

Rosetta::Job::run_jobs_in_parallel( \@jobs, $options{n_procs} );

#===============run hhfiltering =======================================
if ( $options{use_hhblits} ) {
	foreach my $db ( @{ $options{db} } ) {
		my $db_base  = basename($db);
		my $hhr_file = join '.', ( $fasta, $db_base, 'hhr' );
		my $job = Rosetta::Job->new(
			executable   => "$options{hhsearch_path}/hhsearch_postProcess.rb",
			results_file => "$hhr_file"."_orig",
			args         => [ $hhr_file ],
			dir          =>  $options{aln_dir},
			lockfile     => "$fasta.$db_base.hhsearch_lock",
		);

		push @jobs, $job;
	}
	Rosetta::Job::run_jobs_in_parallel( \@jobs, $options{n_procs} );
	my $current_dir = getcwd;
	hhsearch::Util::run_NN_filter(
		$options{aln_dir},
		$options{NN_program},
		$fasta_id,
	  );
}

#=====================================================================
my $seq = read_protein_fasta_fn($fasta);
my $sort_option = "-sort";
if($options{sort} == 0){
	$sort_option = "-nosort"
	}
my $convert_job = Rosetta::Job->new(
	executable => "$options{script_base}/convert_aln.pl",
	args       => [
		"-format_in hhsearch",
		"-format_out grishin",
		"-unique",
		"-max_template_pct_id $options{max_template_pct_id}",
		"-query_len ", length($seq),
		"-max_templates ",$options{max_templates},
		"-renumber_offset ",$options{renumber_offset},
		$sort_option,
		@hhr_files,
		"> $options{outfile}",
	],
	lockfile     => "convert.$options{outfile}.lock",
	results_file => $options{outfile},
	dir          => ".",
);
$convert_job->run_with_message(
	"combining alignments into $options{outfile}"
);

sub run_talos {
	my $talos_fn = shift;
	my $dir      = shift;

	my $talos_script = <<TALOS;
#!/bin/tcsh/
source /work/rvernon/envs/nmrInit.linux9.com
source ~shenyang/TALOS+/talos+Init.com
talos+ -in $talos_fn
TALOS

	use Cwd qw/ getcwd /;
	use File::Path qw/ mkpath /;
	use File::Copy qw/ copy /;

	my $orig_dir = getcwd;
	if ( ! -d $dir ) {
		mkpath $dir;
	}
	copy( $talos_fn, $dir );
	chdir($dir);

	my $talos_script_fn = "talos.script";
	open FILE, ">$talos_script_fn" or die $!;
	print FILE $talos_script;
	close FILE or die $!;

	my $cmd = "tcsh $talos_script_fn";
	system($cmd);

	chdir($orig_dir);
}

sub add_talos_ss_to_hhm {
	my $talos_fn = shift;
	my $hhm_file = shift;

	my $id = basename($hhm_file,'.hhm');
	my $working_dir = "$id.talos";
	my $new_hhm_file = "$id.talos.hhm";
	if ( -f $new_hhm_file ) {
		return $new_hhm_file;
	}

	my $talos_file_to_read = $talos_fn;
	if ( basename($talos_fn) ne 'pred.ss.tab' ) {
		if ( ! -d $working_dir ) {
			run_talos( $talos_fn, $working_dir );
			$talos_file_to_read = "$working_dir/pred.ss.tab";
		}
	}

	# read in talos and psipred secondary structure predictions
	my %talos_ss;

	my $current_tag = 0;
	open FILE, "<$id.a3m" or die $!;
	LINE: while ( my $line = <FILE> ) {
		if ( $line =~ />ss_pred PSIPRED/ ) {
			$current_tag = 'psipred_ss';
			next LINE;
		} elsif ( $line =~ />ss_conf PSIPRED/ ) {
			$current_tag = 'psipred_conf';
			next LINE;
		}

		if ( $current_tag ) {
			if ( $line !~ /^>/ ) {
				chomp $line;
				$talos_ss{$current_tag} .= $line;
			} else {
				$current_tag = 0;
			}
		}
	}

	#open FILE, "<$working_dir/pred.ss.tab" or die $!;
	open FILE, "<$talos_file_to_read";
	while ( my $line = <FILE> ) {
		chomp $line;
		if ( $line =~ /DATA PREDICTED_SS\s+(.*)/ ) {
			my $ss_str = $1;
			$ss_str =~ s/\s+//g;
			$talos_ss{pred} .= $ss_str;
		}
		if ( $line =~ /DATA CONFIDENCE\s+(.*)/ ) {
			my $conf_str = $1;
			$conf_str =~ s/\s+//g;
			$talos_ss{conf} .= $conf_str;
		}
	}
	close FILE or die $!;
	$talos_ss{pred} =~ s/L/C/g;

	if ( length($talos_ss{pred}) != length($talos_ss{psipred_ss}) ) {
		use Data::Dumper::Simple;
		print Dumper(%talos_ss);
		die "Error: mismatch in talos and psipred!\n";
	}

	$talos_ss{new_pred_ss} = '';
	$talos_ss{new_pred_conf} = '';
	foreach my $idx ( 0 .. length($talos_ss{pred}) - 1 ) {
		my $t = substr( $talos_ss{pred}, $idx, 1 );
		my $p = substr( $talos_ss{psipred_ss}, $idx, 1 );

		if ( $t eq 'X' ) {
			$talos_ss{new_pred_ss}   .= $p;
			$talos_ss{new_pred_conf} .= substr( $talos_ss{psipred_conf}, $idx, 1 );
		} else {
			$talos_ss{new_pred_ss}   .= $t;
			$talos_ss{new_pred_conf} .= substr( $talos_ss{conf}, $idx, 1 );
		}
	}

	# add the talos secondary structure to the .hhm file
	open FILE, "<$hhm_file" or die $!;
	open OUTPUT, ">$new_hhm_file" or die $!;
	my $skip = 0;
	while ( my $line = <FILE> ) {
		chomp $line;
		if ( $line =~ /^>/ ) {
			if ( $line =~ /^>ss_pred/ ) {
				$skip = 1;
				print OUTPUT ">ss_pred PSIPRED predicted secondary structure\n";
				print OUTPUT $talos_ss{new_pred_ss}, "\n";
			} elsif ( $line =~ /^>ss_conf/ ) {
				$skip = 1;
				print OUTPUT ">ss_conf PSIPRED confidence values\n";
				print OUTPUT $talos_ss{new_pred_conf}, "\n";
			} else {
				$skip = 0;
			}
		}

		if ( !$skip ) {
			print OUTPUT $line, "\n";
		}
	}

	close OUTPUT or die $!;
	close FILE or die $!;

	return $new_hhm_file;
}
