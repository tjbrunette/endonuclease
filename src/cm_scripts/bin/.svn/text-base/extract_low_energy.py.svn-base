#! /usr/bin/env python2.7
# Extracts the low energy k models from a user-specified silent file
# in O(n) time and O(k) space.
#
# @author Christopher Miles (cmiles@uw.edu)
from heapq import *
import argparse, os, os.path, shutil

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--silent', '-s', required = True, help = 'Input silent file')
    parser.add_argument('--output_dir', '-d', required = True, help = 'Directory to store extracted models')
    parser.add_argument('--num_models', '-n', type = int, default = 100, help = 'Number of models to extract')
    options = vars(parser.parse_args())

    assert os.path.exists(options['silent']), 'Failed to open input silent file'
    assert options['num_models'] >= 0

    # Removes the output directory if it already exists
    if os.path.exists(options['output_dir']):
        shutil.rmtree(options['output_dir'])

    os.mkdir(options['output_dir'])

    with open(options['silent']) as file:
        file.readline()

        # Locate score and description columns
        header = file.readline().split()
        idx_score = header.index('score')
        idx_descr = header.index('description')

        heap = []

        for line in file:
            line = line.strip()
            if not line.startswith('SCORE'):
                continue

            cols = line.split()
            score = float(cols[idx_score])
            descr = cols[idx_descr]
            entry = (-score, descr)

            if len(heap) <= options['num_models']:
                heappush(heap, entry)
            else:
                heappushpop(heap, entry)

    tags = []
    while heap:
        score, descr = heappop(heap)
        tags.append(descr)

    # Extract the selected tags from the input silent file
    extract = ['/Users/build/src/rosetta/rosetta_source/bin/extract_pdbs.macosgccrelease',
               '-database /Users/build/src/rosetta/rosetta_database',
               '-in:file:silent_struct_type binary',
               '-in:file:silent',
               options['silent'],
               '-tags',
               ' '.join(tags)]

    # Execute the command, then move extracted files to the output directory
    os.system(' '.join(extract))
    for tag in tags:
        src = tag + '.pdb'
        dst = options['output_dir'] + '/' + src

        if os.path.exists(src):
            shutil.move(src, dst)
