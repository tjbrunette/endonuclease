#!/usr/bin/perl

use strict;
use warnings;

use lib '/work/tex/src/cm_scripts/perl_lib';

use Cwd qw/ abs_path getcwd /;
use File::Path;
use File::Copy;
use Getopt::Long;
use File::Basename;
use List::MoreUtils qw/ uniq /;

use Rosetta::Job;
use Rosetta::Util qw/ assert_files_exist /;
use Rosetta::Instance;
use Rosetta::Protocol;
use Rosetta::TargetFiles;
use Rosetta::PDB::AtomRecord qw/ records_from_file /;

my %options;
$options{library_dir}  = 'YP_889968.1';
$options{template_pdb} = '1OVM_align.pdb';
$options{compiler}     = 'gcc';
$options{mini_prefix}  = '/work/tex/src/rosetta/rosetta_source';
$options{superimpose}  = "/work/tex/bin/superimpose.py";
$options{cm_base}      = "/work/tex/src/cm_scripts";
&GetOptions(
	\%options,
	"library_dir=s",
	"template_pdb=s",
	"compiler=s",
	"mini_prefix=s",
	"superimpose=s",
	"cm_base=s",
);

my $instance = Rosetta::Instance->new(
	mode        => 'release',
	compiler    => $options{compiler},
	mini_prefix => $options{mini_prefix},
);

my $symm_dir = "$options{library_dir}/symm";
mkpath $symm_dir;

assert_files_exist( $options{template_pdb}, $options{superimpose} );

copy($options{template_pdb}, $symm_dir);
$options{template_pdb} = basename($options{template_pdb});

my $orig_dir = getcwd;
chdir($symm_dir);
my $id = basename($options{template_pdb},'.pdb');
my @records = Rosetta::PDB::AtomRecord::records_from_file($options{template_pdb});
my @chains  = uniq sort map { $_->{chain} } @records;

my $first_chain  = $chains[0];
my @other_chains = @chains[1 .. scalar(@chains)-1];

if ( ! -f "$id.fixed.pdb" ) {
	# split each chain into its own file.
	foreach my $chain (@chains) {
		my @recs = grep { $_->{chain} eq $chain } @records;
		open FILE, ">$id.$chain.pdb";
		foreach my $rec (@recs) {
			print FILE $rec->to_string, "\n";
		}
		close FILE or die $!;
	}

	# superimpose the first chain pdb onto all of the others.
	my $first_chain = $chains[0];
	my @final_recs  = grep { $_->{chain} eq $first_chain } @records;
	foreach my $chain (@chains) {
		if ( $chain eq $first_chain ) { next; }

		my $super_output = "super.$id.$chain.pdb";
		if ( ! -f $super_output ) {
			my $output = `$options{superimpose} $id.$chain.pdb $id.$first_chain.pdb > $super_output`;
		}
		my @super_recs =
			map  { $_->{chain}  = $chain; $_ }   # rename chain
			grep { $_->{chain} eq $first_chain } # add first chain
			Rosetta::PDB::AtomRecord::records_from_file($super_output);
		push @final_recs, @super_recs;
	}

	Rosetta::PDB::AtomRecord::records_to_file("$id.fixed.pdb",\@final_recs);
}
$options{template_pdb} = "$id.fixed.pdb";

my $job = $instance->generate_job('relax');
$job->add_args(
	'-in:file:s ', $options{template_pdb},
	'-relax:fast -use_input_sc',
	'-relax:constrain_relax_to_start_coords' ,
	'-relax:sequence_file relax_sequence_file.txt',
	'-ignore_unrecognized_res',
);

my $relaxed_multimer = $options{template_pdb};
$relaxed_multimer =~ s/\.pdb/_0001.pdb/g;
$job->lockfile    ( "relax.$options{template_pdb}.lock" );
$job->results_file( $relaxed_multimer );
$job->dir         ( '.' );

open FILE, ">relax_sequence_file.txt" or die $!;
print FILE <<RELAX_DEF;
ramp_repack_min 0.02  0.01    1.0
ramp_repack_min 0.250 0.01    1.0
ramp_repack_min 0.550 0.01    1.0
ramp_repack_min 1     0.00001 1.0
accept_to_best
endrepeat
RELAX_DEF

close FILE or die $!;

if ( $job->can_run ) {
	$job->run_with_message( "relaxing $options{template_pdb}" );
}

# make the symmetry definition file
my $symm_file        = "$relaxed_multimer.symm";
my $make_symmdef_job = Rosetta::Job->new(
	executable   => "perl $options{mini_prefix}/src/apps/public/symmetry/make_symmdef_file.pl",
	args         => [
		"-a $first_chain",
		"-i ", @other_chains,
		"-p $relaxed_multimer",
		" > $symm_file",
	],
	results_file => $symm_file,
	lockfile     => "make_symm.lock",
	dir          => '.',
);
if ( $make_symmdef_job->can_run ) {
	$make_symmdef_job->run_with_message( "making symmetry definition" );
}

cleanup_symmdef_file($symm_file);
$symm_file = abs_path($symm_file);
chdir($orig_dir);

# superimpose all of the templates onto $id.fixed_0001_INPUT.pdb
copy( "$symm_dir/$id.fixed_0001_INPUT.pdb", "$options{library_dir}/templates" );
chdir( "$options{library_dir}/templates" );
my @template_pdbs = grep { !/fixed/ } glob( "*.pdb" );
foreach my $template (@template_pdbs) {
	my $t_id   = basename($template,'.pdb');
	my $output = "$t_id.fixed.pdb";

	if ( ! -f $output ) {
		superimpose_pdb(
			$template,                  # pdb to superimpose
			"$id.fixed_0001_INPUT.pdb", # reference
			"$t_id.fixed.pdb"           # output
		);
	}
}
chdir( $orig_dir );
unlink( "$options{library_dir}/templates/$id.fixed_0001_INPUT.pdb" );

# set up BOINC jobs.
print "setting up BOINC jobs.\n";
my $target = basename($options{library_dir});
my $fns = Rosetta::TargetFiles->new(
	$target, $options{library_dir},
	join '/', ($options{cm_base},'protocols/protocol_files.conf')
);

$fns->value( 'symmdef_file', $symm_file );
$fns->value( 'template_pdbs', join ' ', glob("$options{library_dir}/templates/*.fixed.pdb") );

my $protocol = Rosetta::Protocol->new(
	join '/', ($options{cm_base},"protocols/lr_symm.template")
);
$protocol->boinc_tag( "symmetric" );
push @{ $protocol->{extra_files} }, $symm_file;

$protocol->setup_boinc_job( "$symm_dir/boinc_jobs", $fns );

sub cleanup_symmdef_file {
	my $fn = shift;

	open FILE, "<$fn" or die $!;
	my @lines = <FILE>;
	close FILE or die $!;
	my @bad = qw/ Running Found translation Found Placing Adding Writing /;

	open FILE, ">$fn" or die $!;
	foreach my $line (@lines) {
		my $print = 1;
		foreach my $b (@bad) {
			if ( $line =~ /$b/ ) { $print = 0; }
		}
		if ( $print ) {
			print FILE $line;
		}
	}
	close FILE or die $!;
}

sub superimpose_pdb {
	my $mod_pose = shift;
	my $ref_pose = shift;
	my $output   = shift;

	assert_files_exist( $mod_pose, $ref_pose );

	my $cmd = "$options{superimpose} $ref_pose $mod_pose > $output.both 2>$output.log.txt";
	system($cmd);

	my @records = Rosetta::PDB::AtomRecord::read_first_model("$output.both");
	Rosetta::PDB::AtomRecord::records_to_file($output,\@records);
}
