#! /usr/bin/env python
from TMalign import TMResult, tmalign_with_alignment
from scipy import mean
import argparse
import fnmatch
import operator

RERANK_SIMILARITY_THRESHOLD = 0.0

ALIGNMENT_RANKS = (101, 201, 301, 302, 102, 303, 202, 304, 103, 305, 104, 306, 203, 307, 105, 308, 204, 309, 106, 310, 107, 205, 108, 109, 206, 110, 207, 208, 209, 210)

def alignment_number():
    '''Returns alignment identifiers in decreasing order of P(correct)'''
    for r in ALIGNMENT_RANKS:
        yield r

def reorder_partial_threads(results):
    '''Returns the list of partial threads in decreasing order of TM-score'''
    order = []
    for (partial_thread, tmscore) in results:
        if partial_thread not in order:
            order.append(partial_thread)

    return order

def average_of(native, executable, partial_threads):
    '''Returns the average TM-score of partial threads to native'''
    tmscores = []
    for partial_thread in partial_threads:
        result = tmalign_with_alignment(native, partial_thread, executable)
        tmscores.append(result.get_tmscore())

    return mean(tmscores)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--selected', required = True, nargs = '+', help = 'Selected abinitio models')
    parser.add_argument('--partial_threads', required = True, nargs = '+', help = 'Partial threads')
    parser.add_argument('--executable', default = '/work/cmiles/bin/tmalign', help = 'TM-align executable')
    parser.add_argument('--native', help = 'Native structure (evaluation purposes)')
    options = vars(parser.parse_args())

    results = []

    for model in options['selected']:
        for partial_thread in options['partial_threads']:
            result = tmalign_with_alignment(model, partial_thread, options['executable'])
            results.append((partial_thread, result.get_tmscore()))

    # Decreasing order by TM-score
    results.sort(key = operator.itemgetter(-1), reverse = True)
    
    best = results[0][-1]
    if best >= RERANK_SIMILARITY_THRESHOLD:
        reordered = reorder_partial_threads(results)

        for (alignment_id, partial_thread) in zip(alignment_number(), reordered):
            print alignment_id, partial_thread

        # Compare original alignments to reranked ones
        if options['native']:
            old = [f for f in options['partial_threads'] if fnmatch.fnmatch(f, '*01.pdb')]
            new = reordered[:3]
            assert len(old) == 3, "Failed to locate top 3 old partial threads!"
            assert len(new) == 3, "Failed to locate top 3 new partial threads!"

            avg_old = average_of(options['native'], options['executable'], old)
            avg_new = average_of(options['native'], options['executable'], new)

            print 'Average TM-score top partial threads (old): %.3f' % avg_old
            for o in old:
                print '  ', o

            print 'Average TM-score top partial threads (new): %.3f' % avg_new
            for n in new:
                print '  ', n
            
            
