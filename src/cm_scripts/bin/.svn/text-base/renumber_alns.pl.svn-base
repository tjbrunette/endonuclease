#!/usr/bin/perl

use strict;
use warnings;

use lib '/work/tex/src/cm_scripts/perl_lib';

use Rosetta::align_util qw/ read_alns /;

my @targets = map { "T0$_" } ( 515 .. 643 );

@targets = qw/ T0520 /;
foreach my $target (@targets) {
	my $aln_file = "$target/alignment/alignment.filt";	
	if ( ! -f $aln_file ) { next; }

	my @alns = read_alns($aln_file,'grishin');

	my %alns;
	foreach my $aln (@alns) {
		my $id = $aln->get_template_name;
		if ( $id !~ /([\d\w]{5})_(\d+)/ ) {
			die "Error: don't recognize $id!\n";
		}
		my $num = $2;
		my $class = substr( $num, 0, 1);

		push @{ $alns{$class} }, $aln;
	}

	foreach my $key ( keys %alns ) {
		# sort by alignment number
		my @alns = @{$alns{$key}};
		@alns = sort { substr($a->get_template_name,6) <=> substr($b->get_template_name,6) } @alns;
		#print join "\n", ( map { $_->get_template_name } @alns );
		#print "\n";
		#print substr($alns[0]->get_template_name,6), "\n" ;
		
		# renumber alignments
		my $idx = 1;
		foreach my $aln (@alns) {
			my $new_name = substr($aln->get_template_name,0,5) . '_' . $key . sprintf("%02d",$idx);
			$aln->template_name( $new_name );
			#print $aln->template_name, " => ", $new_name, "\n";
			$idx++;
			print $aln->filt_string, "\n";
		}
	}
}
