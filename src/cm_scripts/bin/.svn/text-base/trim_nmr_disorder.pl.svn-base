#!/usr/bin/perl

use strict;
use warnings;

use lib '/work/tex/src/cm_scripts/perl_lib';

use Getopt::Long;
use Rosetta::Util;
use File::Basename;
use Rosetta::PDB::AtomRecord;

my %options;
$options{cutoff} = 3.5; # >1.0A deviation in ensemble => disordered!
$options{max_models} = 1;
&GetOptions(
	\%options,
	"cutoff=f",
	"max_models=i",
);

my @pdbfiles = @ARGV;

foreach my $fn (@pdbfiles) {
	print STDERR "trimming $fn ... ";
	my @records = Rosetta::PDB::AtomRecord::records_from_file($fn);
	my @ca_records = grep { $_->{atom_name} eq ' CA ' } @records;

	# measure the average XYZ displacement of the CA atoms in different models
	# $coords{$res_no} = [ $xyz1, $xyz2, xyz3 ... ]
	# $xyz = [ $x, $y, $z ]
	my %coords;

	my @res_numbers = sort { $a <=> $b }
		map { trim_whitespace($_->{res_no}) } @ca_records;

	foreach my $res_no (@res_numbers) {
		my @recs = 
			grep { $_->{res_no} == $res_no } 
			@ca_records;
		foreach my $rec (@recs) {
			my @pos = map { trim_whitespace($rec->{$_}) } qw/ x y z /;
			push @{ $coords{$res_no} }, \@pos;
		}
	}

	my %per_residue_devs;
	foreach my $res_no ( keys %coords ) {
		my $list = $coords{$res_no};
		# compute center-of-mass
		my @center_of_mass = @{ calc_center_of_mass( $list ) };

		# compute average deviation from center-of-mass
		my @devs = map { xyz_dist(\@center_of_mass,$_) } @$list;
		my $mean_dev = mean(\@devs);
		$per_residue_devs{$res_no} = $mean_dev;
	}

	my $output_dir = dirname($fn);
	my $output_fn  = join '.', ( basename($fn,'.pdb'), 'trim', 'pdb' );
	open FILE, ">$output_dir/$output_fn" or die $!;
	my $last_res_no = 0;
	my $model_count = 1;
	my $print = 1;
	print FILE join '', ( "MODEL     ", sprintf( "%4d", $model_count ) );
	print FILE "\n";
	foreach my $rec (@records) {
		my $res_no = trim_whitespace( $rec->{res_no} );
		if ( $per_residue_devs{$res_no} <= $options{cutoff} ) {
			if ( $res_no < $last_res_no ) {
				$model_count++;
				print FILE "TER\n";
				print FILE "ENDMDL\n";
				print FILE join '', ( "MODEL     ", sprintf( "%4d", $model_count ) );
				print FILE "\n";
			}
			if ( $model_count <= $options{max_models} ) {
				print FILE $rec->to_string, "\n";
			}
			$last_res_no = $res_no;
		}
	}
	print FILE "TER\n";
	print FILE "ENDMDL\n";
	close FILE or die $!;

	my $nres_trimmed = scalar grep { $per_residue_devs{$_} > $options{cutoff} }
		map { trim_whitespace($_->{res_no}) } @ca_records;
	$nres_trimmed /= $model_count;

	#foreach my $res_no ( sort { $a <=> $b } keys %per_residue_devs ) {
	#	print join ' ', ( $res_no, $per_residue_devs{$res_no} );
	#	print "\n";
	#}
	print STDERR "finished trimming $nres_trimmed residues.\n";
}

sub calc_center_of_mass {
	my $coord_list = shift;

	my @sums = ( 0.0, 0.0, 0.0 );
	foreach my $xyz (@$coord_list) {
		for my $idx ( 0 .. 2 ) {
			$sums[$idx] += $xyz->[$idx];
		}
	}

	my $N = scalar(@$coord_list);
	my @center_of_mass = (
		$sums[0] / $N,
		$sums[1] / $N,
		$sums[2] / $N
	);

	return \@center_of_mass;
}

sub xyz_dist {
	my $xyz1 = shift;
	my $xyz2 = shift;

	my $dist = sqrt(
		( $xyz1->[0] - $xyz2->[0] ) ** 2 +
		( $xyz1->[1] - $xyz2->[1] ) ** 2 +
		( $xyz1->[2] - $xyz2->[2] ) ** 2
	);
	return $dist;
}

sub mean {
	my $n = shift;

	use List::Util qw/ sum /;
	return ( sum(@$n) / scalar(@$n) );
}
