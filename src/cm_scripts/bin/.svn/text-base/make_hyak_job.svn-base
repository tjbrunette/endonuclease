#! /usr/bin/env python
from string import Template

job_template = Template('$executable -database $database @$flags -out:file:silent $output_dir/n$node_id.s$slot_id.out')

submit_template = Template('''#! /bin/bash
#PBS -N $job_id
#PBS -l nodes=1:ppn=12,mem=22gb,feature=12core

## If the job doesn't finish in 24 hours, cancel it
#PBS -l walltime=24:00:00

## Put STDOUT, STDERR into a single file
## in the following directory
#PBS -o $log_dir
#PBS -j oe

## Specify the working directory for this job bundle
#PBS -d $work_dir

HYAK_SLOTS=`wc -l < $PBS_NODEFILE`
find $script_dir -name job* | parallel -j $HYAK_SLOTS
exit 0
''')
                           
def create_dir(name):
    import os, os.path, shutil

    # Delete the directory if it already exists, ignoring any errors raised in the process
    dir_exists = os.path.isdir(name)
    if dir_exists:
        shutil.rmtree(name, True)

    try:
        os.mkdir(name)
    except:
        print 'Error encountered during create_directory()'
        exit(1)


def create_job_file(options, node_id, slot_id, output_dir):
    import os
    from stat import S_IRWXU, S_IRWXG, S_IRWXO

    params = { 'executable' : options.executable, 'database' : options.database, 'flags' : options.flags, 'output_dir' : output_dir, 'node_id' : node_id, 'slot_id' : slot_id }

    filename = output_dir + '/job_%d_%d' % (node_id, slot_id)
 
    file = open(filename, 'w')
    contents = job_template.safe_substitute(params)
    file.write('#! /bin/sh\n')
    file.write(contents)
    file.write('\n')
    file.close()

    os.chmod(filename, S_IRWXU ^ S_IRWXG ^ S_IRWXO)                    


def create_submit_file(options, node_id, working_dir, output_dir):
    params = { 'num_nodes' : options.nodes, 'log_dir' : options.log, 'work_dir' : working_dir, 'script_dir' : output_dir }
    params['job_id'] = options.name + '_' + str(node_id)
    
    filename = output_dir + '/submit_%d' % (node_id)

    file = open(filename, 'w')
    contents = submit_template.safe_substitute(params)
    file.write(contents)
    file.write('\n')
    file.close()


if __name__ == '__main__':
    import os
    from optparse import OptionParser
    from os.path import abspath

    parser = OptionParser()

    parser.add_option('--executable', help = 'Command to execute')
    parser.add_option('--database', help = 'Rosetta database')
    parser.add_option('--flags', help = 'Command line arguments for executable')
    parser.add_option('--log', help = 'Directory to store job output')

    parser.add_option('--name', help = 'Unique identifier for this job')
    parser.add_option('--nodes', help = 'Number of nodes')
    parser.add_option('--slots', help = 'Number of processors per node')

    options, args = parser.parse_args()
    working_dir = abspath(os.getcwd())
    output_dir  = abspath(options.name)
    create_dir(output_dir)

    num_nodes = int(options.nodes)
    num_slots = int(options.slots)

    for node_id in range(num_nodes):
        create_submit_file(options, node_id, working_dir, output_dir)

        for slot_id in range(num_slots):
            create_job_file(options, node_id, slot_id, output_dir)

