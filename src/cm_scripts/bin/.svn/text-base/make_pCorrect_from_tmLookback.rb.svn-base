#!/usr/bin/ruby
require "optparse"
options = {}
optparse = OptionParser.new do |opts|
  options[:tm_aln] = ""
  options[:tm_aln_labeled] = "cluster0_lb_lab.filt"
  options[:p_correct] = "p-correct.txt"
  opts.on('','--tm_aln FILE',String,"location of tm alignment file") do |f|
    options[:tm_aln] = f
  end
  opts.on('','--tm_aln_labeled FILE',String,"future location of tm alignment labeled file") do |f|
    options[:tm_aln_labeled] = f
  end
  opts.on('','--p_correct FILE',String,"future location of p-correct") do |f|
    options[:p_correct] = f
  end
  opts.on( '-h','--help', 'Display this screen') do
    puts opts
    exit
  end
end
optparse.parse!
tm_aln_fn = options[:tm_aln]
tm_aln_lab_fn = options[:tm_aln_labeled]
p_correct_fn = options[:p_correct]
scale_by_exp = 25 #25th power set ad-hoc
tm_aln = File.open(tm_aln_fn,"r")
tm_aln_lab = File.open(tm_aln_lab_fn,"w")
p_correct = File.open(p_correct_fn,"w")
pdbid = ""
pdb_tm_h = Hash.new
pdb_id_h = Hash.new
tmp_id = 1
while(line = tm_aln.gets())
  position = line.split(" ")
  if(position[0] == "##")
    pdbid = position[2]
    tm_aln_lab << "## relab #{pdbid}_#{tmp_id}\n"
    pdb_id_h[pdbid] = tmp_id
    tmp_id += 1
  else if (position[0] =="#")
         tm_score = position[6].to_f
         pdb_tm_h[pdbid] = tm_score
         tm_aln_lab << line
       else
         tm_aln_lab << line
       end
  end
end
top_tm_score = pdb_tm_h.values.sort.reverse[0]
pdb_predScore_h = Hash.new
pred_sum = 0
pdb_tm_h.each do |key,value|
  loss = top_tm_score-value
  log_reg_adj_value = (1-(0.008830634 + loss*0.817813382))**scale_by_exp
  pdb_predScore_h[key] = log_reg_adj_value
  pred_sum += log_reg_adj_value
end
pdb_id_h.each do |key,value|
  p_correct << "#{value} #{pdb_predScore_h[key]/pred_sum}\n"
end
tm_aln.close
tm_aln_lab.close
p_correct.close
