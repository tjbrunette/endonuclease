#!/usr/bin/perl

use strict;
use warnings;

use lib '/work/tex/src/cm_scripts/perl_lib';
use TMalign qw/ get_tmscore /;
use Getopt::Long;
use List::Util qw/ sum /;

my %options;
$options{pt} = [];
$options{native} = 0;
$options{debug}  = 0;

&GetOptions(
	\%options,
	"model_weights=s",
	"pt=s",
	"native=s",
	"debug!",
);

my %weights;
if ( $options{model_weights} && -f $options{model_weights} ) {
	%weights = read_model_weights($options{model_weights});
}

my %total_scores = map { $_ => 0 } @{$options{pt}};
if ( $options{debug} ) {
	print join ' ', ( @{$options{pt}} );
	print "\n";
}
foreach my $model (@ARGV) {
	my @votes = calc_votes( $model, $options{pt} );
	if ( $options{debug} ) {
		print join ' ', @votes;
		print "\n";
	}

	foreach my $idx ( 0 .. scalar(@votes)-1 ) {
		my $pt = $options{pt}->[$idx];
		my $weight = 1;

		if ( exists $weights{$model} ) {
			$weight = $weights{$model};
		}
		$total_scores{$pt} += $weight * $votes[$idx];
	}
}

# normalize total_scores
my $sum = sum( values %total_scores );
foreach my $key ( keys %total_scores ) {
	$total_scores{$key} = sprintf( "%6.4f", $total_scores{$key} / $sum );
}

my @columns = qw/ exemplar voting_score /;
if ( $options{native} && -f $options{native} ) {
	push @columns, 'tmscore';
}
print join ' ', @columns;
print "\n";
foreach my $pt ( @{$options{pt}} ) {
	my @output = ( $pt, $total_scores{$pt} );
	if ( $options{native} && -f $options{native} ) {
		push @output, get_tmscore($pt,$options{native});
	}
	print join ' ', @output;
	print "\n";
}

sub calc_votes {
	my $model = shift;
	my $ptms  = shift;

	my @scores = map { get_tmscore($model,$_) } @$ptms;
	@scores    = normalize_scores(@scores);

	if ( wantarray ) { return @scores; }
	return \@scores;
}

sub normalize_scores {
	my $tot = 0;
	foreach my $s (@_) {
		$tot += $s;
	}

	my @norm = map { $_ / $tot } @_;

	if ( wantarray ) { return @norm; }
	return \@norm;
}

sub read_model_weights {
	my $fn = shift;

	my %weights;
	open FILE, "<$fn" or die $!;
	while ( my $line = <FILE> ) {
		if ( $line =~ /^#/ )    { next; }
		if ( $line =~ /^\s*$/ ) { next; }

		chomp $line;
		my ($model,$weight) = split /\s+/, $line;
		if ( is_digit($weight) ) {
			$weights{$model} = $weight;
		}
	}
	close FILE or die $!;

	if ( wantarray ) { return %weights; }
	return \%weights;
}

sub is_digit {
	return ( $_[0] =~ /^([\d\.\e\-]+)/ );
}
