#!/usr/bin/perl

use strict;
use warnings;

use lib '/work/tex/src/cm_scripts/perl_lib';

use Cwd qw/ abs_path /;
use File::Basename;
use Getopt::Long;
use Rosetta::Job;
use Statistics::Descriptive;

my %options;
$options{N}           = 10;
$options{silent}      = 'T0475_boinc_broker_refine_broker_refine4_tex__23519_0.out';
$options{native}      = 0;
$options{working_dir} = 0;

&GetOptions(
	\%options,
	"N=i",
	"silent=s",
	"native=s",
	"working_dir=s",
);

$0 = basename $0;

my $usage = <<USAGE;
$0 -N <int> -silent <fn> -native <native> -working_dir <dir>
USAGE

foreach my $fn ( qw/ native silent / ) {
	if ( !$options{$fn} || ! -f $options{$fn} ) {
		die "Error: must provide -$fn!\n";
	}
	$options{$fn} = abs_path($options{$fn});
}

my $sel_file = join '.', ( basename($options{silent}), "sel.out" );
my $select_job = Rosetta::Job->new(
	executable   => "~tex/src/cm_scripts/bin/silent_extract_lowscore.pl",
	args         => "-N 10 -silent_file $options{silent} -outfile $sel_file -column score",
	results_file => $sel_file,
	lockfile     => "sel.lock",
	dir          => $options{working_dir},
);

if ( $select_job->can_run ) {
	$select_job->run_with_message( "selecting decoys from $options{silent}" );
}

my @tags = read_tags_fast("$options{working_dir}/$sel_file");
my $extract_job = Rosetta::Job->new(
	executable   => "/work/tex/src/mini/bin/extract_pdbs.linuxgccrelease",
	args         => [
		"-in:file:silent $sel_file",
		"-in:file:residue_type_set fa_standard",
		"-in:file:silent_struct_type binary",
	],
	results_file => "$tags[0].pdb",
	lockfile     => "extract.lock",
	dir          => $options{working_dir},
);
if ( $extract_job->can_run ) {
	$extract_job->run_with_message( "extracting decoys from $sel_file" );
}

if ( !$options{native} || ! -f $options{native} ) {
	die "Error: no -native given!";
}

my @pdbs = map { "$_.pdb" } @tags;
my $super_cmd = join ' ', ( "superimpose.py $options{native}", @pdbs );
my $super_dat = "$sel_file.super_dat.txt";
my $super_job = Rosetta::Job->new(
	executable => "superimpose.py",
	args => [
		"$options{native}", @pdbs,
		" > low$options{N}.pdb",
		"2> $super_dat",
	],
	results_file => $super_dat,
	lockfile     => "super.lock",
	dir          => $options{working_dir},
);
if ( $super_job->can_run ) {
	$super_job->run_with_message( "superimposing pdbs" );
}

my @rmsd;
my @nres;
my $output;
open FILE, "<$options{working_dir}/$super_dat" or die $!;
while ( my $line = <FILE> ) {
	$output .= $line;
}
close FILE or die $!;
while ( $output =~ /([\d\.]+) over (\d+) residues/g ) {
	push @rmsd, $1;
	push @nres, $2;
}

print join ' ', ( 'median_rmsd:', calc_median(@rmsd) );
print "\n";
print join ' ', ( 'median_nres:', calc_median(@nres) );
print "\n";

sub calc_mean {
	use List::Util qw/ sum /;
	my $sum = sum(@_);
	return($sum / scalar(@_));
}

sub calc_median {
	use Statistics::Descriptive;
	my $stat = Statistics::Descriptive::Full->new();
	$stat->add_data(@_);

	return $stat->median;
}


sub read_tags_fast {
	my $fn = shift;

	open FILE, "<$fn" or die $!;

	my $seen_header = 0;
	my @tags;
	while ( my $line = <FILE> ) {
		chomp $line;
		if ( $line =~ /^SCORE:/ ) {
			if ( !$seen_header ) {
				$seen_header = 1;
			} else {
				my @d = split /\s+/, $line;
				push @tags, $d[-1];
			}
		}
	}
	close FILE or die $!;

	if ( wantarray ) { return @tags; }
	return \@tags;
}
