#!/usr/bin/perl

use strict;
use warnings;

use lib '/work/tex/src/cm_scripts/perl_lib';

use CstUtil qw/ read_csts dgaussian /;
use Data::Dumper::Simple;
use Getopt::Long;

my %options;
$options{delta}   = 1;
$options{cstfile} = 'empty';
$options{sdev}    = 1.0;
&GetOptions(
	\%options,
	'cstfile=s',
	'delta=f',
	'sdev=f',
);

my $csts = read_csts( $options{cstfile} );

my @xs;
my $x = 4;
my $res = 0.5;
while ( (12.0 - $x) > 1e-10  ) {
	push @xs, $x;
	$x += $res;
}

foreach my $resi ( keys %$csts ) {
foreach my $resj ( keys %{ $csts->{$resi} } ) {
	my @vals = map { [ $_, eval_cst_score( $csts->{$resi}{$resj}, $_ ) ] } @xs;

	my @sorted = sort { $a->[1] <=> $b->[1] } @vals;
	my $min_y  = $sorted[0]->[1];

	my @valid = grep { abs($sorted[0]->[1] - $_->[1]) < $options{delta} }
		@sorted;
	my $width = scalar(@valid) * $res;

	my $upper = $sorted[0]->[0] - ( 0.5 * $width );
	my $lower = $sorted[0]->[0] + ( 0.5 * $width );
	print "AtomPair CA $resi CA $resj BOUNDED $lower $upper $options{sdev}";
	print "; cm_cst from $options{cstfile}\n";
}
}


sub eval_cst_score {
	my $csts   = shift;
	my $radius = shift;

	my $val = 0;
	foreach my $cst (@$csts) {
		$val += $cst->{weight} * dgaussian( $cst->{mean}, $cst->{sdev}, $radius );
	}

	return -1 * log( $val );
}
